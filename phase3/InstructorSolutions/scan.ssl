% PT Scanner.ssl   Ver. 4.1
%
% Date:  30 Jun 1980
%       (Revised v4.1 - 21 Dec 2018)
%       (Revised for MiniT - 27 Dec 2018 - look for %%)
%
% Author:  Alan Rosselet
%
% Abstract
%     The scanner breaks a PT source program up into syntax tokens.
%   It removes token separators - blanks, tabs, comments.  The
%   scanner detects these lexical errors:  unclosed comments,
%   unclosed literals, literals that cross a line boundary,
%   illegal characters and integers followed by identifiers with no
%   separator between them.

Input :
        lLetter
        firstCharClass = lLetter
        lDigit
        lPlus           '+'
        lMinus          '-'
        lStar           '*'
        lColon          ':'
        lEquals         '='
        lDot            '.'
        lComma          ','
        lSemicolon      ';'
        lQuote
        lBackslash
        lLeftAngle      '<'
        lRightAngle     '>'
        lLeftParen      '('
        lRightParen     ')'
        lLeftBracket    '['
        lRightBracket   ']'
        lLeftBrace      '{'
        lRightBrace     '}'
%%
        lAtSign         '@'
        lQuestionMark   '?'
        lPercent        '%'
%%
        lBlank
        lIllegal
        lNewLine
        lTab
        lNewPage
        lEndFile
        lastCharClass = lEndFile;

Output :
        % Keyword tokens -
        %   Tokens pDiv through pRepeat are keywords which will be separated
        %   from user defined identifiers by the Screener.  This Scanner
        %   treats them all as identifiers.
        pDiv
        firstKeywordToken = pDiv
        pMod
        pOr
        pAnd
        pNot
        pThen
        pElse
        pOf
        pEnd
%%      pUntil
%%      pDo
        pArray
        pFile
%%      pPacked
%%      pProgram
        pConst
        pVar
        pType
        pProcedure
%%      pBegin
        pIf
        pCase
%%      pWhile
%%      pRepeat
        pExternal
        pModule
        pElsif
        pLabel
        pLoop
        pExit
        pWhen
%%      lastKeywordToken = pRepeat
        lastKeywordToken = pWhen
%%

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens -
        %   These will be sent to the parser with a value or index.
        pIdentifier
        firstCompoundInputToken = pIdentifier
        pInteger
        pLiteral
        lastCompoundInputToken = pLiteral

        % Non-compound tokens -
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pPlus
        pMinus
        pStar
        pColonEquals
        pDot
        pComma
        pSemicolon
        pColon
        pEquals
        pNotEqual
        pLess
        pLessEqual
        pGreaterEqual
        pGreater
        pLeftParen
        pRightParen
        pLeftBracket
        pRightBracket
        pDotDot
%%
        pPlusEquals
        pMinusEquals
        pPlusPlus
        pMinusMinus
        pAtSign
        pQuestionMark
%%      lastSyntaxToken = pDotDot;
        lastSyntaxToken = pQuestionMark;
%%

Error :
        eIllegalChar = 5
        firstScanError = eIllegalChar
        eLiteralLine
        eLiteralEOF
        eCommentEOF
        eNoSeparator
        lastScanError = eNoSeparator;

mechanism Buffer :
    % Buffer saves the characters associated with the
    % compound tokens identifier, integer and literal.

    oBufferSave;
        % Save the character form of the last accepted lexical token.




rules

% Note that the order of choice alternatives
% may have a significant effect on performance
% under some implementations of S/SL.
Scan :
        {[
            | lBlank :
            | lLetter:
                oBufferSave
                @Identifier
            | lNewLine:
                .pNewLine
            | lTab:
            | ';':
                .pSemicolon
            | '(':
%%              [
%%                  | '*':
%%                      @AlternateComment
%%                  | *:
%%                      .pLeftParen
%%              ]
                .pLeftParen
            | ')':
                .pRightParen
            | '[':
                .pLeftBracket
            | ']':
                .pRightBracket
            | ',':
                .pComma
            | ':':
                [
                    | '=':
                        .pColonEquals
                    | *:
                        .pColon
                ]
            | lDigit:
                oBufferSave
                @Integer
                [
                    | lLetter:
                        #eNoSeparator
                        oBufferSave
                        @Identifier
                    | *:
                ]
            | '=':
                .pEquals
            | '+':
%%              .pPlus
                [
                    | '=':
                        .pPlusEquals
                    | '+':
                        .pPlusPlus
                    | *:
                        .pPlus
                ]
%%
            | lQuote:
                @Literal
            | '-':
%%              .pMinus
                [
                    | '=':
                        .pMinusEquals
                    | '-':
                        .pMinusMinus
                    | *:
                        .pMinus
                ]
%%
            | '.':
                [
                    | '.':
                        .pDotDot
                    | *:
                        .pDot
                ]
            | '<':
                [
                    | '>':
                        .pNotEqual
                    | '=':
                        .pLessEqual
                    | *:
                        .pLess
                ]
            | '>':
                [
                    | '=':
                        .pGreaterEqual
                    | *:
                        .pGreater
                ]
%%          | '{':
            | '%':
%%
                @Comment
            | '*':
                .pStar
%%
            | '@':
                .pAtSign
            | '?':
                .pQuestionMark
%%
            | lNewPage:
            | lEndFile:
                .pEndFile
                >
            | *:
                ?
                #eIllegalChar
        ]};

Identifier :
        % Assemble an identifier token

        {[
            | lLetter, lDigit:
                oBufferSave
            | *:
                .pIdentifier
                >
        ]};

Integer :
        % Assemble an integer token

        {[
            | lDigit:
                oBufferSave
            | *:
                .pInteger
                >
        ]};

Literal :
        % Assemble a literal string token

        {[
            | lQuote:
                [
                    | lQuote:
                        oBufferSave
                    | *:
                        .pLiteral
                        >
                ]
            | lNewLine:         % literal must not cross a line boundary
                #eLiteralLine
                .pNewLine
                >
            | lEndFile:         % literal must be closed before EOF
                #eLiteralEOF
                .pEndFile
                >
            | *:        % literal may contain any other character
                [
                    | lBackslash:
                        oBufferSave
                    | *:
                ]
                ?
                oBufferSave
        ]};

Comment :
        % Discard the contents of a comment

        {[
%%          | '}':
%%              >
            | lNewLine:
                .pNewLine
                >
%%
            | lEndFile:         % comment must be closed before EOF
                #eCommentEOF
                .pEndFile
                >
            | *:        % comment may contain any other character
                ?
        ]};

%% AlternateComment :
%%      {[
%%          | '*':
%%              [
%%                  | ')':
%%                      >
%%                  | *:
%%              ]
%%          | lNewLine:
%%              .pNewLine
%%          | lEndFile:
%%              #eCommentEOF
%%              .pEndFile
%%              >
%%          | *:
%%              ?
%%      ]};

end
